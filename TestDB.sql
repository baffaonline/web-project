-- MySQL Script generated by MySQL Workbench
-- Mon Jan 22 15:13:08 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema test
-- -----------------------------------------------------
-- Схема для проекта Кинорейтинг. Имеем таблицу с информацией о фильмах, таблицу актеров, стран, жанров фильмов и пользователей. Также есть таблица film_actor, в которой хранится информация о том, в каком фильме играют какие актеры и таблица film_genre, где хранятся жанры фильмов. И есть таблица review, где хранятся отзывы и оценки пользователей к фильму

-- -----------------------------------------------------
-- Schema test
--
-- Схема для проекта Кинорейтинг. Имеем таблицу с информацией о фильмах, таблицу актеров, стран, жанров фильмов и пользователей. Также есть таблица film_actor, в которой хранится информация о том, в каком фильме играют какие актеры и таблица film_genre, где хранятся жанры фильмов. И есть таблица review, где хранятся отзывы и оценки пользователей к фильму
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `test` DEFAULT CHARACTER SET utf8 ;
USE `test` ;

-- -----------------------------------------------------
-- Table `test`.`country`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`country` ;

CREATE TABLE IF NOT EXISTS `test`.`country` (
  `country_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор страны',
  `country_name` VARCHAR(45) NOT NULL COMMENT 'Название страны',
  PRIMARY KEY (`country_id`),
  UNIQUE INDEX `country_name_UNIQUE` (`country_name` ASC),
  UNIQUE INDEX `country_id_UNIQUE` (`country_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `test`.`film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`film` ;

CREATE TABLE IF NOT EXISTS `test`.`film` (
  `film_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор фильма',
  `film_title` VARCHAR(45) NOT NULL COMMENT 'Название фильма',
  `film_country` INT NULL COMMENT 'Страна создания фильма',
  `film_description` TEXT(1000) NOT NULL COMMENT 'Описание сюжета фильма',
  `film_age_restriction` TINYINT(2) NULL DEFAULT 0 COMMENT 'Возрастное ограничение для фильма',
  `film_date_of_release` DATE NOT NULL,
  `film_poster_path` VARCHAR(50) NULL,
  PRIMARY KEY (`film_id`),
  INDEX `film_country_idx` (`film_country` ASC),
  UNIQUE INDEX `film_id_UNIQUE` (`film_id` ASC),
  CONSTRAINT `film_country`
    FOREIGN KEY (`film_country`)
    REFERENCES `test`.`country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `test`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`user` ;

CREATE TABLE IF NOT EXISTS `test`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор пользователя',
  `username` VARCHAR(16) NOT NULL COMMENT 'Логин',
  `password` VARCHAR(32) NOT NULL COMMENT 'Пароль пользователя',
  `email` VARCHAR(255) NULL COMMENT 'Е-мэйл пользователя',
  `name` VARCHAR(20) NOT NULL COMMENT 'Имя пользователя',
  `lastname` VARCHAR(20) NOT NULL COMMENT 'Фамилия пользователя',
  `birthdate` DATE NULL COMMENT 'Дата рождения пользователя',
  `user_country` INT NOT NULL COMMENT 'Страна проживания пользователя',
  `user_rating` INT NULL DEFAULT 0 COMMENT 'Рейтинг пользователя среди других пользователей этого сайта',
  `isAdmin` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Определяет, является ли пользователь админом. Равно 1, если  это админ и 0 в противном случае',
  `isBanned` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Если пользователь забанен, то равно 1, в обратном случае 0',
  PRIMARY KEY (`id`, `username`),
  INDEX `country_idx` (`user_country` ASC),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  CONSTRAINT `country`
    FOREIGN KEY (`user_country`)
    REFERENCES `test`.`country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `test`.`review`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`review` ;

CREATE TABLE IF NOT EXISTS `test`.`review` (
  `film_rvw_id` INT NOT NULL COMMENT 'Идентификатор фильма, к которому оставлен отзыв',
  `user_rvw_id` INT NOT NULL COMMENT 'Идентификатор пользователя, который оставил отзыв',
  `review_text` TEXT(1000) NOT NULL COMMENT 'Текст отзыва',
  `user_mark` INT(10) NOT NULL COMMENT 'Оценка пользователя фильму',
  `review_title` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`film_rvw_id`, `user_rvw_id`),
  INDEX `user_id_idx` (`user_rvw_id` ASC),
  CONSTRAINT `film_rvw_id`
    FOREIGN KEY (`film_rvw_id`)
    REFERENCES `test`.`film` (`film_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `user_rvw_id`
    FOREIGN KEY (`user_rvw_id`)
    REFERENCES `test`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `test`.`genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`genre` ;

CREATE TABLE IF NOT EXISTS `test`.`genre` (
  `genre_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор жанра',
  `genre_name` VARCHAR(20) NOT NULL COMMENT 'Название жанра',
  PRIMARY KEY (`genre_id`),
  UNIQUE INDEX `genre_id_UNIQUE` (`genre_id` ASC),
  UNIQUE INDEX `genre_name_UNIQUE` (`genre_name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `test`.`actor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`actor` ;

CREATE TABLE IF NOT EXISTS `test`.`actor` (
  `actor_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор актера',
  `actor_name` VARCHAR(20) NOT NULL COMMENT 'Имя актера',
  `actor_surname` VARCHAR(20) NOT NULL COMMENT 'Фамилия актера',
  `actor_country` INT NULL DEFAULT NULL COMMENT 'Страна актера\n',
  `actor_image_path` VARCHAR(45) NULL,
  PRIMARY KEY (`actor_id`),
  INDEX `actor_country_idx` (`actor_country` ASC),
  UNIQUE INDEX `actor_id_UNIQUE` (`actor_id` ASC),
  UNIQUE INDEX `actor_image_path_UNIQUE` (`actor_image_path` ASC),
  CONSTRAINT `actor_country`
    FOREIGN KEY (`actor_country`)
    REFERENCES `test`.`country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `test`.`film_actor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`film_actor` ;

CREATE TABLE IF NOT EXISTS `test`.`film_actor` (
  `film_act_id` INT NOT NULL COMMENT 'Идентификатор фильма, которому соответствует актер c идентификатором actor_id',
  `actor_flm_id` INT NOT NULL COMMENT 'Идентификатор актера, который играет в фильме с идентификатором film_id',
  PRIMARY KEY (`film_act_id`, `actor_flm_id`),
  INDEX `actor_id_idx` (`actor_flm_id` ASC),
  CONSTRAINT `film_act_id`
    FOREIGN KEY (`film_act_id`)
    REFERENCES `test`.`film` (`film_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `actor_flm_id`
    FOREIGN KEY (`actor_flm_id`)
    REFERENCES `test`.`actor` (`actor_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `test`.`film_genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `test`.`film_genre` ;

CREATE TABLE IF NOT EXISTS `test`.`film_genre` (
  `film_gnr_id` INT NOT NULL COMMENT 'Идентификатор фильма, которому соответствует жанр c идентификатором genre_id',
  `genre_flm_id` INT NOT NULL COMMENT 'Идентификатор жанра фильма film_id',
  PRIMARY KEY (`film_gnr_id`, `genre_flm_id`),
  INDEX `genre_id_idx` (`genre_flm_id` ASC),
  CONSTRAINT `film_gnr_id`
    FOREIGN KEY (`film_gnr_id`)
    REFERENCES `test`.`film` (`film_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `genre_flm_id`
    FOREIGN KEY (`genre_flm_id`)
    REFERENCES `test`.`genre` (`genre_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `test`.`country`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (1, 'England');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (2, 'USA');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (3, 'Belarus');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (4, 'Russia');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (5, 'France');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (6, 'Italy');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (7, 'Canada');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (8, 'Australia');
INSERT INTO `test`.`country` (`country_id`, `country_name`) VALUES (9, 'Austria');

COMMIT;


-- -----------------------------------------------------
-- Data for table `test`.`film`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`film` (`film_id`, `film_title`, `film_country`, `film_description`, `film_age_restriction`, `film_date_of_release`, `film_poster_path`) VALUES (1, 'Thor 3 : Ragnarok', 2, 'Imprisoned, the almighty Thor finds himself in a lethal gladiatorial contest against the Hulk, his former ally. Thor must fight for survival and race against time to prevent the all-powerful Hela from destroying his home and the Asgardian civilization.', 16, '2017-11-02', 'img/thor3.jpg');
INSERT INTO `test`.`film` (`film_id`, `film_title`, `film_country`, `film_description`, `film_age_restriction`, `film_date_of_release`, `film_poster_path`) VALUES (2, 'Spider-Man: Homecoming', 2, 'Peter Parker balances his life as an ordinary high school student in Queens with his superhero alter-ego Spider-Man, and finds himself on the trail of a new menace prowling the skies of New York City.', 16, '2017-07-06', 'img/spider-man.jpg');
INSERT INTO `test`.`film` (`film_id`, `film_title`, `film_country`, `film_description`, `film_age_restriction`, `film_date_of_release`, `film_poster_path`) VALUES (3, 'The Shawshank Redemption', 2, 'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.', 16, '1994-10-14', 'img/shawshank.jpg');

COMMIT;


-- -----------------------------------------------------
-- Data for table `test`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`user` (`id`, `username`, `password`, `email`, `name`, `lastname`, `birthdate`, `user_country`, `user_rating`, `isAdmin`, `isBanned`) VALUES (1, 'kurty', '5f4dcc3b5aa765d61d8327deb882cf99', 'kurty872@gmail.com', 'Kurt', 'Cobein', '1967-02-20', 2, NULL, 0, 0);
INSERT INTO `test`.`user` (`id`, `username`, `password`, `email`, `name`, `lastname`, `birthdate`, `user_country`, `user_rating`, `isAdmin`, `isBanned`) VALUES (2, 'coolman', '25d55ad283aa400af464c76d713c07ad', 'goodmail@gmail.com', 'Jack', 'Smith', '1988-03-30', 1, NULL, 0, 0);
INSERT INTO `test`.`user` (`id`, `username`, `password`, `email`, `name`, `lastname`, `birthdate`, `user_country`, `user_rating`, `isAdmin`, `isBanned`) VALUES (3, 'baffa', 'f6cae8770df084aa2de88b5ae642ba9f', 'baffalo98@gmail.com', 'Ivan', 'Kustov', '1998-06-08', 3, NULL, 1, 0);

COMMIT;


-- -----------------------------------------------------
-- Data for table `test`.`review`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`review` (`film_rvw_id`, `user_rvw_id`, `review_text`, `user_mark`, `review_title`) VALUES (1, 1, 'I don\'t know what s wrong with some people.This movie had nothing against Europeans or Europe culture/history.Cause if it had,then this wouldn\'t be approved by European critics.\n\nAnyway,this movie and the Logan are the grand jewels of comic book movies of this year.Logan was deep,emotional,brutal with intriguing story.Thor is pure epicness,filled with action and the comedy side fits perfectly to tone of the movie.From the trailer I thought Guardians of the Galaxy will have lots of cringe jokes and cheesy moments but they used the comedy perfectly.Same can be said for Thor 3 too.They managed to have an impact on the audience with sentimental stuffs,at the same time they made us laugh in right places. This movie has already gotten itself carved to my memory.A memorable movie for me.Just like dark knight,Logan and guardians of the galaxy 1.', 9, 'Nice movie');
INSERT INTO `test`.`review` (`film_rvw_id`, `user_rvw_id`, `review_text`, `user_mark`, `review_title`) VALUES (1, 2, 'I know some people are worried about the humour on this movie.But they used it excellently in this flick.This movie to me,is at least on the same level with Guardians of the Galaxy 1.I mean both guardians and Thor 3 made me laugh but never felt cringe or sensed any forced jokes.There were also very intense and emotional moments in this Thor movie.The fight sequences were so damn epic.When it comes to action,this movie is close to Lord of the Rings 2.They did a good job on reflecting the epicness of the Ragnarok event. The last trailer of the movie got my attention.And I made one of the best decisions of my life by watching it.\n\nHela,Valkyrie,Hulk,Thor,Loki,Grandmaster they all did pretty good job.Especially Hela.She was so gorgeous and menacing at the same time. Tessa Thompson kinda surprised me with her great performance btw.', 8, 'Jokes weren\'t misplaced');
INSERT INTO `test`.`review` (`film_rvw_id`, `user_rvw_id`, `review_text`, `user_mark`, `review_title`) VALUES (2, 2, 'This is definitely the best movie about Spider-Man. Marvel and Sony have finally got the character perfect both in and out of the suit. His link in the MCU just makes the movie that much better. Tom Holland is the best Spider-Man and Peter Parker and you can\'t even compare him to the previous 2. This movie is very fun and there are shocking plot twists to look forward to. It\'s definitely better than the original 2 Sam Raimi movies without a doubt. And be sure to stay to the very very end.', 9, 'Tom Holland the Man');
INSERT INTO `test`.`review` (`film_rvw_id`, `user_rvw_id`, `review_text`, `user_mark`, `review_title`) VALUES (2, 3, 'This is what I was afraid of when Disney took over marvel,it should have been called Spider-Man,high school musical ,I know it,s comic-book movie ,but we came a long way to show that comics are not just for kids ,but this sets us back ,none of the characters are like they are in the comics ,Peter was a nerdy school kid but not like this ,flash was a big school bully ,but this flash is a wimp ,my grandmother could take him ,and aunt May is a hottie in this movie ,not the old caring aunt of the comics ,why ,why ,hope this is not a trend ,the suits sucks too.i know they are trying to hit a new up to date audience ,but really.good graphics and action but lame characters and story .guess I,m just getting old .', 7, 'Can make it better');
INSERT INTO `test`.`review` (`film_rvw_id`, `user_rvw_id`, `review_text`, `user_mark`, `review_title`) VALUES (3, 1, 'Whenever I talk about this movie with my friends, I do not even refer to it by title, but rather as \"The Movie\". When I say \"The Movie\", my friends know exactly what I\'m talking about. In fact the main reason that me and my friends don\'t refer to it by title is because this movie is so great, that we do not feel worthy enough to say it\'s name in vain! I still remember the first time I saw The Shawshank Redemption. Some friends of mine and I went to see it at one of those \"Budget Theaters\" over the summer of 1995. None of us really knew anything about the movie, but we had heard that it was pretty good. So, not having any real expectations, we saw it. When the final credits rolled and the lights came on in the theater, all of us just sat there with our jaws hanging down on the floor. I turned my head towards my friend Bob and said \"That was the greatest movie I have ever seen in my entire life!\" There\'s really no other way I can put it in words. Every moment of this movie captivated me and inspired me to believe in the one true thing in life...... \"HOPE\". This movie is sad, uplifting, inspiring, harsh, cold, funny (at the right times), jaw-dropping, and heart-warming all at the same time. I get chills every time I watch this film and this film contains the greatest ending (which takes place over the last 30 minutes or so)in movie history! How it all just \"comes together\" is so incredible and uplifting. I should also mention the music in this movie is nearly flawless as well, and the soundtrack is a \"must buy\" for any music fan. The only bad thing about this movie is the fact that I know I will never see a better movie, no matter how many I may see. I\'ve seen many movies over the past few years, many excellent films. However, every time I walk out of the theater, I turn to my friend or family member that I saw it with and I say, \"That was a great movie, but it wasn\'t nearly as good as \'you know what\'!\" There have been many movies over the past few years that thought would really move me or that I might one day call my \"favorite of all time\", but they\'ve all fallen far short of \"The Shawshank Redemption\". So, if you have yet to see this movie, please run to the video store immediately. You\'re guaranteed to find it in the \"employee picks\" section. And if it isn\'t in that section, then you should tell the employees there that there is something seriously wrong with them. If you have seen this movie, go see it again. If you haven\'t bought your own copy yet, buy one. In fact buy two, and put one in a fire-proof safe, just in case of an emergency. :o) So, you want a 1-10 rating??? I give it a 13!!!!!!', 8, 'Simply known as \"The Movie\"');
INSERT INTO `test`.`review` (`film_rvw_id`, `user_rvw_id`, `review_text`, `user_mark`, `review_title`) VALUES (3, 2, 'I have never seen such an amazing film since I saw The Shawshank Redemption. Shawshank encompasses friendships, hardships, hopes, and dreams. And what is so great about the movie is that it moves you, it gives you hope. Even though the circumstances between the characters and the viewers are quite different, you don\'t feel that far removed from what the characters are going through.\n\nIt is a simple film, yet it has an everlasting message. Frank Darabont didn\'t need to put any kind of outlandish special effects to get us to love this film, the narration and the acting does that for him. Why this movie didn\'t win all seven Oscars is beyond me, but don\'t let that sway you to not see this film, let its ranking on the IMDb\'s top 250 list sway you, let your friends recommendation about the movie sway you.\n\nSet aside a little over two hours tonight and rent this movie. You will finally understand what everyone is talking about and you will understand why this is my all time favorite movie.', 9, 'Prepare to be moved');

COMMIT;


-- -----------------------------------------------------
-- Data for table `test`.`genre`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`genre` (`genre_id`, `genre_name`) VALUES (1, 'Comedy');
INSERT INTO `test`.`genre` (`genre_id`, `genre_name`) VALUES (2, 'Fantastic film');
INSERT INTO `test`.`genre` (`genre_id`, `genre_name`) VALUES (3, 'Drama');
INSERT INTO `test`.`genre` (`genre_id`, `genre_name`) VALUES (4, 'Criminal');
INSERT INTO `test`.`genre` (`genre_id`, `genre_name`) VALUES (5, 'Adventure');
INSERT INTO `test`.`genre` (`genre_id`, `genre_name`) VALUES (6, 'Action');

COMMIT;


-- -----------------------------------------------------
-- Data for table `test`.`actor`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (1, 'Benedict', 'Cumberbatch', NULL, '/img/actors/cumberbatch.jpg');
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (2, 'Chris', 'Hemsworth', 8, '/img/actors/hemsworth.jpg');
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (3, 'Tom', 'Hiddleston', 1, '/img/actors/hiddleston.png');
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (4, 'Robert', 'Downey Jr.', 2, '/img/actors/downey.jpg');
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (5, 'Tom', 'Holland', 1, '/img/actors/holland.jpg');
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (6, 'Tim', 'Robbins', 1, '/img/actors/robbins.jpg');
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (7, 'Morgan', 'Freeman', 2, '/img/actors/freeman.jpg');
INSERT INTO `test`.`actor` (`actor_id`, `actor_name`, `actor_surname`, `actor_country`, `actor_image_path`) VALUES (8, 'Michael', 'Keaton', 2, '/img/actors/keaton.jpg');

COMMIT;


-- -----------------------------------------------------
-- Data for table `test`.`film_actor`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (1, 2);
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (1, 3);
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (2, 4);
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (2, 5);
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (2, 8);
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (3, 7);
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (3, 6);
INSERT INTO `test`.`film_actor` (`film_act_id`, `actor_flm_id`) VALUES (1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `test`.`film_genre`
-- -----------------------------------------------------
START TRANSACTION;
USE `test`;
INSERT INTO `test`.`film_genre` (`film_gnr_id`, `genre_flm_id`) VALUES (1, 1);
INSERT INTO `test`.`film_genre` (`film_gnr_id`, `genre_flm_id`) VALUES (1, 5);
INSERT INTO `test`.`film_genre` (`film_gnr_id`, `genre_flm_id`) VALUES (2, 5);
INSERT INTO `test`.`film_genre` (`film_gnr_id`, `genre_flm_id`) VALUES (2, 6);
INSERT INTO `test`.`film_genre` (`film_gnr_id`, `genre_flm_id`) VALUES (3, 3);
INSERT INTO `test`.`film_genre` (`film_gnr_id`, `genre_flm_id`) VALUES (3, 4);

COMMIT;

